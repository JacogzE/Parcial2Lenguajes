Explicación aplicación de conceptos

Conceptos de POO:
    
    Encapsulamiento: Los elementos inherentes a la app (Patients) tienen atributos y un constructor públicos sin embargo
    se controla su acceso a través de otros módulos, el entry point de la aplicación (Program.cs) no puede acceder a sus datos.

    Herencia: No hubo necesidad de aplicar Herencia

    Polimorfismo: No hubo necesidad de aplicar Polimorfismo

    Modularización: La app se compone de 3 módulos
    
        -Patient.cs: Clase pública para definir objetos patient

        -PatientService.cs: Hace las funciones de CRUD para los objetos patient, y los almacena estructurándolos como una lista ligada
        ordenada según cantidad de síntomas (de mayor a menor)

        -Hospital.cs: Es controlador y se encarga de ejecutar las funciones públicas de PatientService.cs según la lógica de prioridad
        de atención
    
    Principios de arquitectura: La asignación de las responsabilidades de PatientService como clase creadora de objetos Patient y Hospital
    como controlador y creador (por contención) de la misma se hizo a partir de prinicpios SOLID evitando repetir código, aumentando el
    potencial de escalabilidad y previniendo interacciones indeseadas usuario/sistema